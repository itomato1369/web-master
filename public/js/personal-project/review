개인 프로젝트 
목적 : 
Node.js(Express)와 Oracle DB를 사용하여 백엔드를 구축하고
HTML, CSS, JavaScript로 프런트엔드를 구성한 웹 애플리케이션
웹 애플리케이션(인터넷 브라우저를 통해 웹 서버와 통신하며 작동하는 응용 소프트웨어)

어떤 홈페이지: 라디오 사연 모집 게시판 && 조회 && 서버 관리자가 데이터를 열람할 수 있는 목록HTML 
사용한 AI: gemini

개인 프로젝트를 하면서 느낀점!

1. 만약 이 라디오 사연 모집이 진짜였으면
혹시 Oracle SQl 데이터베이스에서 관리를 똑바로 못하거나,
실수로 UPDATE, DELETE, PURGE 를 하면 큰일나겠구나.

2. 개인정보 제공에 동의합니다. 라고 체크를 했지만,
실제로 관리자들은 이 개인정보를 다 볼 수 있다는 점이 조금 무섭다.
보안이 중요하다. 그리고 정보나 데이터를 이상하게 보내도 그냥 받게 되어있어서
보완이 필요

3. gemini , chatgpt는 자기 마음대로 수정하고 삭제한다. 명령 하나 할 때마다
꼼꼼하게 다 세부적으로 요구하는 걸 적어야 한다. 그래도 자기 멋대로 바꾼다.
수정한거 꼼꼼하게 안 읽어보고 그냥 진행하다 보면 코드가 다 꼬여서, 
아에 처음부터 해야 한다. (무료버전이라 이러지 않을까)

4. 제대로 완성하거나 하나씩 기능이 작동하는거 돌아가는 거 보면 뿌듯함.

개선해야 할 점
1. 보안 강화
클라이언트 측 민감 정보 노출: modify.html에서 사연 조회 시 서버에서 데이터를 받아와 
클라이언트(modify.html 내부)에서 로드하는 방식입니다. 
이 과정에서 story_id_hidden 필드를 사용하는 등 사연 ID가 클라이언트에게 직접 노출되는데, 
이는 보안에 취약할 수 있습니다.
사연 조회 시 토큰 기반 인증(JWT 등)을 사용하거나, 
세션/쿠키를 사용하여 서버 측에서 사연 ID를 관리하고 클라이언트에는 노출하지 않도록 
로직을 수정하는 것이 안전합니다.

2. 서버 측 입력 처리 및 검증
server.js에서 사연 등록/수정 시, 클라이언트에서 유효성 검사를 했더라도 서버에서도 
모든 입력값을 다시 한번 검증해야 합니다. 악의적인 사용자가 프론트엔드 검사를 우회하여 
잘못된 데이터를 보낼 수 있기 때문입니다.
개선: 사연 내용 길이, 나이의 숫자 형식, 필수 필드 누락 여부 등을 server.js의 
라우터 핸들러 내에서 반드시 재검증해야 합니다.

3. 관리자 페이지 (list.html/list.js)의 비효율성
페이징 부재: list.js를 보면 limit=99999를 설정하여 전체 데이터를 요청하고 있습니다. 
데이터가 수백 건을 넘어가면 관리자 페이지의 로딩 속도가 급격히 느려지고 서버에 큰 부하를 줄 수 있습니다.
개선: 페이징(Pagination) 기능을 구현하여 한 번에 10~20건만 요청하도록 하고, 
페이지 버튼을 통해 데이터를 나눠서 불러와야 합니다.

